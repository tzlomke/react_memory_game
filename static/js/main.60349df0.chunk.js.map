{"version":3,"sources":["components/GameCard/index.js","components/Wrapper/index.js","components/ScoreBoard/index.js","components/Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","onClick","event","guessClick","id","alt","name","src","image","Wrapper","children","ScoreBoard","score","Modal","style","display","show","close","modalContent","imgSrc","imgAlt","App","state","cards","guessed","win","_this","parseInt","target","includes","push","i","length","j","Math","floor","random","_ref","setState","closeModalHandler","_this2","this","components_Wrapper","components_ScoreBoard","map","card","components_GameCard","key","components_Modal","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60349df0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction GameCard(props) {\n\treturn (\n\t\t<div className=\"card\">\n\t\t\t<div onClick={(event) => props.guessClick(event, props.id)} className=\"img-container\">\n\t\t\t\t<img alt={props.name} src={props.image} id={props.id}/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default GameCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n\treturn (\n\t\t<div className=\"wrapper\">\n\t\t\t{props.children}\n\t\t</div>\n\n\t\t\n\t);\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ScoreBoard(props) {\n\treturn (\n\t\t<div className=\"score-board\">\n\t\t\t<h1 className=\"title\">Memory Game</h1>\n\t\t\t<div className=\"score-board\">\n\t\t\t\t<h2 className=\"score\">Your Score: {props.score} | Max Score: 12</h2>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ScoreBoard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Modal(props) {\n\treturn (\n\t\t<div className=\"modal-wrapper\"\n\t\t\tstyle={{\n\t\t\t\tdisplay: props.show ? 'block' : 'none',\n\t\t}}>\n\n\t\t\t<div className=\"modal-header\">\n\t\t\t\t<span className=\"close-modal-btn\" onClick={props.close}>X</span>\n\t\t\t</div>\n\n\t\t\t<div className=\"modal-body\">\n\t\t\t\t<div>\n\t\t\t\t\t<h2 className=\"modal-content\">{props.modalContent}</h2>\n\t\t\t\t\t<img className=\"modal-image\" src={props.imgSrc} alt={props.imgAlt}></img>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"modal-footer\">\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport GameCard from \"./components/GameCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport Modal from \"./components/Modal\";\nimport cards from \"./cards.json\";\nimport './App.css';\n\nclass App extends Component {\n\tstate = {\n\t\tcards,\n\t\tscore: 0,\n\t\tguessed: [],\n\t\twin: false,\n\t\tshow: false,\n\t\timgSrc: \"http://oohlo.com/wp-content/uploads/2018/05/vlcsnap-2018-05-24-20h16m08s593-1024x574.png\",\n\t\timgAlt: \"Loss Image\",\n\t\tmodalContent: <strong>Bummer! You've attempted to fly through the ring too fast. Now you're goo.</strong>\n\t};\n\n\t// Game Logic\n\tguessClick = event => {\n\n\t\t// Card Array\n\t\tconst cards = this.state.cards;\n\n\t\t// Selected Card ID\n\t\tlet id = parseInt(event.target.id);\n\t\t\n\t\t// Score\n\t\tlet score = this.state.score;\n\n\t\t// Guessed Array\n\t\tlet guessed = this.state.guessed;\n\n\t\t// Win Condition\n\t\tlet win = this.state.win;\n\n\t\t// Modal Contents\n\t\tlet imgSrc = this.state.imgSrc;\n\t\tlet imgAlt = this.state.imgAlt;\n\t\tlet modalContent = this.state.modalContent;\n\t\t\n\t\t// Modal State\n\t\tlet show = this.state.show;\n\n\t\t// Checks to See if Card has Already Been Selected\n\t\tif (guessed.includes(id)) {\n\t\t\t// Clear Array\n\t\t\tguessed = [];\n\t\t\t\n\t\t\t// Reset Score\n\t\t\tscore = 0;\n\n\t\t\t// Show Modal\n\t\t\tshow = true;\n\t\t} else {\n\t\t\t// Push Selected Card ID Into Guessed Array\n\t\t\tguessed.push(id);\n\n\t\t\t// Increment Score\n\t\t\tscore++;\n\t\t}\n\n\t\t// Win Condition\n\t\tif (score === 12) {\n\t\t\t// Reset Score\n\t\t\tscore = 0;\n\n\t\t\t// Win Condition Set to True\n\t\t\twin = true;\n\n\t\t\t// Changes Modal Contents\n\t\t\timgSrc = \"https://vignette.wikia.nocookie.net/expanse/images/b/b1/Ringnetwork1.png/revision/latest/scale-to-width-down/1000?cb=20180615211721\";\n\t\t\timgAlt = \"Win Image\";\n\t\t\tmodalContent =<strong>Congrats! You've opened the ring network!</strong>;\n\n\t\t\t// Show Modal\n\t\t\tshow = true;\n\t\t}\n\n\t\t// Randomize Cards Array\n\t\tfor (let i = cards.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[cards[i], cards[j]] = [cards[j], cards[i]]\n\t\t}\n\t\t\n\t\t// Set New States\n\t\tthis.setState({ cards , score, guessed, win, show, imgSrc, imgAlt, modalContent });\n\n\t};\n\n\t// Closes Modal\n\tcloseModalHandler = () => {\n\t\tthis.setState({\n\t\t\tshow: false\n\t\t});\n\t};\n\n\trender() {\n\t\treturn ( \n\t\t\t<Wrapper>\n\n\t\t\t\t<ScoreBoard\n\t\t\t\t\tscore={this.state.score}\n\t\t\t\t/>\n\n\t\t\t\t{this.state.cards.map(card => ( \n\t\t\t\t\t<GameCard\n\t\t\t\t\t\tguessClick={this.guessClick}\n\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\timage={card.image}\n\t\t\t\t\t\tname={card.name}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t\n\t\t\t\t<Modal \n\t\t\t\t\tshow={this.state.show}\n\t\t\t\t\tclose={this.closeModalHandler}\n\t\t\t\t\timgSrc={this.state.imgSrc}\n\t\t\t\t\timgAlt={this.state.imgAlt}\n\t\t\t\t\tmodalContent={this.state.modalContent}\n\t\t\t\t>\n\t\t\t\t</Modal>\n\n\t\t\t</Wrapper>\n\t\t);\n\t};\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}